{"version":3,"sources":["types/SortType.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortType","setSortType","isFieldReversed","setIsFieldReversed","filteredGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","isSortedOrReversed","className","type","onClick","classnames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,+EAAAA,K,WAAAA,E,oBAAAA,E,iBAAAA,M,gBCOCC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAmCK,IAAMC,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,SAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EApCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAwB1B,OAtBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAG7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAG9B,QACE,OAAO,MAMXX,GACFI,EAAcQ,UAGTR,EAOeS,CACpBnB,EAAiBI,EAAUE,GAGvBc,EAAqBhB,GAAYE,EAOvC,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMlB,EAAYN,EAASe,WACpCO,UAAWG,IAAW,SAAU,UAC9B,CACE,WAAYpB,IAAaL,EAASe,WALxC,iCAWA,wBACEQ,KAAK,SACLC,QAAS,kBAAMlB,EAAYN,EAASiB,SACpCK,UAAWG,IAAW,SAAU,UAC9B,CACE,WAAYpB,IAAaL,EAASiB,SALxC,4BAWA,wBACEM,KAAK,SACLC,QAAS,kBAAMhB,GAAoBD,IACnCe,UAAWG,IAAW,SAAU,UAC9B,CACE,YAAalB,IALnB,qBAWCc,GACC,wBACEE,KAAK,SACLC,QA5CW,WACnBlB,EAAYN,EAASI,SACrBI,GAAmB,IA2CXc,UAAU,4BAHZ,sBAUJ,6BACGb,EAAciB,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCjHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e650de34.chunk.js","sourcesContent":["export enum SortType {\n  Default = '',\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n","import 'bulma/css/bulma.css';\nimport classnames from 'classnames';\nimport './App.scss';\nimport React, { useState } from 'react';\n\nimport { SortType } from './types/SortType';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: SortType,\n  isFieldReversed: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Alphabet: {\n          return good1.localeCompare(good2);\n        }\n\n        case SortType.Length: {\n          return good1.length - good2.length;\n        }\n\n        default: {\n          return 0;\n        }\n      }\n    });\n  }\n\n  if (isFieldReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Default);\n  const [isFieldReversed, setIsFieldReversed] = useState(false);\n\n  const filteredGoods = getPreparedGoods(\n    goodsFromServer, sortType, isFieldReversed,\n  );\n\n  const isSortedOrReversed = sortType || isFieldReversed;\n\n  const resetHandler = () => {\n    setSortType(SortType.Default);\n    setIsFieldReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.Alphabet)}\n          className={classnames('button', 'is-info',\n            {\n              'is-light': sortType !== SortType.Alphabet,\n            })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.Length)}\n          className={classnames('button', 'is-info',\n            {\n              'is-light': sortType !== SortType.Length,\n            })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsFieldReversed(!isFieldReversed)}\n          className={classnames('button', 'is-info',\n            {\n              'is-light': !isFieldReversed,\n            })}\n        >\n          Reverse\n        </button>\n\n        {isSortedOrReversed && (\n          <button\n            type=\"button\"\n            onClick={resetHandler}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {filteredGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}